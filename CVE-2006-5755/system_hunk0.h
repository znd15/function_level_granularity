



#ifndef __ASM_SYSTEM_H
#define __ASM_SYSTEM_H

#include <linux/kernel.h>
#include <asm/segment.h>
#include <asm/alternative.h>

#ifdef __KERNEL__

#define __STR(x) #x
#define STR(x) __STR(x)

#define __SAVE(reg,offset) "movq %%" #reg ",(14-" #offset ")*8(%%rsp)\n\t"
#define __RESTORE(reg,offset) "movq (14-" #offset ")*8(%%rsp),%%" #reg "\n\t"

/* frame pointer must be last for get_wchan */
#define SAVE_CONTEXT    "pushq %%rbp ; movq %%rsi,%%rbp\n\t"
#define RESTORE_CONTEXT "movq %%rbp,%%rsi ; popq %%rbp\n\t"

#define __EXTRA_CLOBBER \
 ,"rcx","rbx","rdx","r8","r9","r10","r11","r12","r13","r14","r15"

#define switch_to(prev,next,last) \
 asm volatile(SAVE_CONTEXT \
		     "movq %%rsp,%P[threadrsp](%[prev])\n\t" /* save RSP */ \
		     "movq %P[threadrsp](%[next]),%%rsp\n\t" /* restore RSP */ \
		     "call __switch_to\n\t" \
		     ".globl thread_return\n" \
		     "thread_return:\n\t" \
		     "movq %%gs:%P[pda_pcurrent],%%rsi\n\t" \
		     "movq %P[thread_info](%%rsi),%%r8\n\t" \
 LOCK_PREFIX "btr %[tif_fork],%P[ti_flags](%%r8)\n\t" \
		     "movq %%rax,%%rdi\n\t" \
		     "jc ret_from_fork\n\t" \
 RESTORE_CONTEXT \
 : "=a" (last) \
 : [next] "S" (next), [prev] "D" (prev), \
 [threadrsp] "i" (offsetof(struct task_struct, thread.rsp)), \
 [ti_flags] "i" (offsetof(struct thread_info, flags)),\
 [tif_fork] "i" (TIF_FORK), \
 [thread_info] "i" (offsetof(struct task_struct, thread_info)), \
 [pda_pcurrent] "i" (offsetof(struct x8664_pda, pcurrent)) \
 : "memory", "cc" __EXTRA_CLOBBER)
    
extern void load_gs_index(unsigned); 

/*
 * Load a segment. Fall back on loading the zero
 * segment if something goes wrong..
 */
#define loadsegment(seg,value) \
 asm volatile("\n" \
		"1:\t" \
		"movl %k0,%%" #seg "\n" \
		"2:\n" \
		".section .fixup,\"ax\"\n" \
		"3:\t" \
		"movl %1,%%" #seg "\n\t" \
		"jmp 2b\n" \
		".previous\n" \
		".section __ex_table,\"a\"\n\t" \
		".align 8\n\t" \
		".quad 1b,3b\n" \
		".previous" \
 : :"r" (value), "r" (0))

/*
 * Clear and set 'TS' bit respectively
 */
#define clts() __asm__ __volatile__ ("clts")

static inline unsigned long read_cr0(void)
{ 
	unsigned long cr0;
	asm volatile("movq %%cr0,%0" : "=r" (cr0));
	return cr0;
}